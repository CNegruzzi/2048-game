{"mappings":"ACGA,MAAM,EAAO,ICFb,MACE,YACE,EAAe,CACb,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CACD,CACA,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,MAChB,CAEA,UAAW,CACT,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,CACb,MAAO,CAAA,EAGT,IAAM,EAAW,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,EAEpC,EAAiB,AAAC,IACtB,IAAM,EAAgB,EAAM,MAAM,CAAC,AAAC,GAAS,AAAS,IAAT,GAE7C,KAAO,EAAc,MAAM,CAAG,GAC5B,EAAc,IAAI,CAAC,GAGrB,OAAO,CACT,EAEA,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IAAO,CAChC,IAAI,CAAC,KAAK,CAAC,EAAI,CAAG,EAAe,IAAI,CAAC,KAAK,CAAC,EAAI,EAEhD,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACrB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,GAAK,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAM,EAAE,GACnD,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EAAI,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAM,EAAE,CAChD,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAM,EAAE,CAAG,EAC3B,IAAI,CAAC,KAAK,EAAI,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAElC,IAIJ,CAAA,IAAI,CAAC,KAAK,CAAC,EAAI,CAAG,EAAe,IAAI,CAAC,KAAK,CAAC,EAAI,CAClD,CAIA,OAAO,IAFU,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,CAG5C,CAEA,WAAY,CACV,IAAM,EAAW,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,EAEpC,EAAiB,AAAC,IACtB,IAAM,EAAgB,EAAM,MAAM,CAAC,AAAC,GAAS,AAAS,IAAT,GAE7C,KAAO,EAAc,MAAM,CAAG,GAC5B,EAAc,OAAO,CAAC,GAGxB,OAAO,CACT,EAEA,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IAAO,CAChC,IAAI,CAAC,KAAK,CAAC,EAAI,CAAG,EAAe,IAAI,CAAC,KAAK,CAAC,EAAI,EAEhD,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACrB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,GAAK,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAM,EAAE,GACnD,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EAAI,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAM,EAAE,CAChD,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAM,EAAE,CAAG,EAC3B,IAAI,CAAC,KAAK,EAAI,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAElC,IAIJ,CAAA,IAAI,CAAC,KAAK,CAAC,EAAI,CAAG,EAAe,IAAI,CAAC,KAAK,CAAC,EAAI,CAClD,CAIA,OAAO,IAFU,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,CAG5C,CAEA,QAAS,CACP,IAAM,EAAW,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,EAEpC,EAAiB,AAAC,IACtB,IAAM,EAAgB,EAAM,MAAM,CAAC,AAAC,GAAS,AAAS,IAAT,GAE7C,KAAO,EAAc,MAAM,CAAG,GAC5B,EAAc,IAAI,CAAC,GAGrB,OAAO,CACT,EAEA,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IAAO,CAChC,IAAI,EAAS,EAAE,CAEf,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,EAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EAGlC,EAAS,EAAe,GAExB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACjB,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,CAAM,CAAC,EAAI,EAAE,CAC1B,CAAM,CAAC,EAAI,EAAE,CAAG,EAChB,IAAI,CAAC,KAAK,EAAI,CAAM,CAAC,EAAE,CAEvB,KAIJ,EAAS,EAAe,GAExB,IAAK,IAAI,EAAW,EAAG,EAAW,EAAG,IACnC,IAAI,CAAC,KAAK,CAAC,EAAS,CAAC,EAAI,CAAG,CAAM,CAAC,EAAS,AAEhD,CAIA,OAAO,IAFU,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,CAG5C,CAEA,UAAW,CACT,IAAM,EAAW,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,EAEpC,EAAiB,AAAC,IACtB,IAAM,EAAgB,EAAM,MAAM,CAAC,AAAC,GAAS,AAAS,IAAT,GAE7C,KAAO,EAAc,MAAM,CAAG,GAC5B,EAAc,IAAI,CAAC,GAGrB,OAAO,CACT,EAEA,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IAAO,CAChC,IAAI,EAAS,EAAE,CAEf,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,EAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EAGlC,EAAO,OAAO,GACd,EAAS,EAAe,GAExB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACjB,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,CAAM,CAAC,EAAI,EAAE,CAC1B,CAAM,CAAC,EAAI,EAAE,CAAG,EAChB,IAAI,CAAC,KAAK,EAAI,CAAM,CAAC,EAAE,CAEvB,KAKJ,AADA,CAAA,EAAS,EAAe,EAAxB,EACO,OAAO,GAEd,IAAK,IAAI,EAAW,EAAG,EAAW,EAAG,IACnC,IAAI,CAAC,KAAK,CAAC,EAAS,CAAC,EAAI,CAAG,CAAM,CAAC,EAAS,AAEhD,CAIA,OAAO,IAFU,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,CAG5C,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAYA,WAAY,CACV,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,GAAI,AAAyB,OAAzB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAGtB,OAFA,IAAI,CAAC,MAAM,CAAG,MAEP,IAAI,CAAC,MAAM,CA8BxB,MAvBI,CAFkB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,AAAC,GAAQ,EAAI,QAAQ,CAAC,MAkBrD,AAfW,CAAA,AAAC,IACf,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,GACG,EAAM,GAAK,CAAK,CAAC,EAAI,CAAC,EAAI,GAAK,CAAK,CAAC,EAAI,CAAC,EAAM,EAAE,EAClD,EAAM,GAAK,CAAK,CAAC,EAAI,CAAC,EAAI,GAAK,CAAK,CAAC,EAAM,EAAE,CAAC,EAAI,CAEnD,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,CAAA,EAEa,IAAI,CAAC,KAAK,GACrB,CAAA,IAAI,CAAC,MAAM,CAAG,MAAd,GAMG,IAAI,CAAC,MAAM,AACpB,CAEA,OAAQ,CACc,SAAhB,IAAI,CAAC,MAAM,GACb,IAAI,CAAC,KAAK,CAAG,CACX,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CAED,IAAI,CAAC,KAAK,CAAG,GAGf,IAAI,CAAC,MAAM,CAAG,UAEd,IAAI,CAAC,cAAc,GACnB,IAAI,CAAC,cAAc,EACrB,CAEA,SAAU,CACR,IAAI,CAAC,KAAK,CAAG,CACX,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CAED,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,MAChB,CAEA,gBAAiB,CACf,IAAM,EAAa,EAAE,CAErB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACrB,AAAyB,IAAzB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EACtB,EAAW,IAAI,CAAC,CAAE,IAAA,EAAK,IAAA,CAAI,GAKjC,IAAM,EACJ,CAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAAE,AAE3D,CAAA,IAAI,CAAC,KAAK,CAAC,EAAW,GAAG,CAAC,CAAC,EAAW,GAAG,CAAC,CAAG,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,CACzE,CACF,EDnRM,EAAY,SAAS,aAAa,CAAC,eACnC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAe,SAAS,aAAa,CAAC,kBAE5C,SAAS,IACP,IAAM,EAAa,EAAK,QAAQ,GAGhC,AAFc,SAAS,gBAAgB,CAAC,eAElC,OAAO,CAAC,CAAC,EAAM,KACnB,IAEM,EAAQ,CAAU,CAFZ,KAAK,KAAK,CAAC,EAAQ,GAEF,CADjB,EAAQ,EACc,AAElC,CAAA,EAAK,WAAW,CAAG,AAAU,IAAV,EAAc,GAAK,EACtC,EAAK,SAAS,CAAG,aAEb,IACF,EAAK,SAAS,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAA,CAAO,EAErC,CAAA,AAAU,IAAV,GAAe,AAAU,IAAV,CAAU,GAC3B,EAAK,SAAS,CAAC,GAAG,CAAC,OAGzB,GAEA,EAAU,WAAW,CAAG,EAAK,QAAQ,GAErC,IAAM,EAAa,EAAK,SAAS,GAEjC,EAAW,SAAS,CAAC,MAAM,CAAC,SAAU,AAAe,QAAf,GACtC,EAAY,SAAS,CAAC,MAAM,CAAC,SAAU,AAAe,SAAf,GACvC,EAAa,SAAS,CAAC,MAAM,CAAC,SAAU,AAAe,SAAf,EAC1C,CAEA,EAAY,gBAAgB,CAAC,QAAS,KAChC,EAAY,SAAS,CAAC,QAAQ,CAAC,UACjC,EAAK,KAAK,GACV,IAEA,EAAY,SAAS,CAAC,MAAM,CAAC,SAC7B,EAAY,SAAS,CAAC,GAAG,CAAC,WAC1B,EAAY,WAAW,CAAG,WACjB,EAAY,SAAS,CAAC,QAAQ,CAAC,aACxC,EAAK,OAAO,GACZ,IACA,EAAY,SAAS,CAAC,MAAM,CAAC,WAC7B,EAAY,SAAS,CAAC,GAAG,CAAC,SAC1B,EAAY,WAAW,CAAG,QAE9B,GAEA,SAAS,gBAAgB,CAAC,UAAW,AAAC,IACpC,GAAI,AAAqB,YAArB,EAAK,SAAS,GAChB,OAGF,EAAU,cAAc,GAExB,IAAI,EAAQ,CAAA,EAEN,EAAgB,KAAK,SAAS,CAAC,EAAK,QAAQ,IAElD,OAAQ,EAAU,GAAG,EACnB,IAAK,UACH,EAAQ,EAAK,MAAM,GACnB,KAEF,KAAK,YACH,EAAQ,EAAK,QAAQ,GACrB,KAEF,KAAK,YACH,EAAQ,EAAK,QAAQ,GACrB,KAEF,KAAK,aACH,EAAQ,EAAK,SAAS,EAE1B,CAEA,IAAM,EAAgB,KAAK,SAAS,CAAC,EAAK,QAAQ,IAE9C,GAAS,IAAkB,IAC7B,EAAK,cAAc,GACnB,IAEJ,GAEA","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["'use strict';\nvar $a5fd07fa01589658$exports = {};\n'use strict';\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.board = initialState;\n        this.score = 0;\n        this.status = 'idle';\n    }\n    moveLeft() {\n        if (this.status !== 'playing') return false;\n        const oldBoard = JSON.stringify(this.board);\n        const shiftAndFilter = (array)=>{\n            const filteredArray = array.filter((cell)=>cell !== 0);\n            while(filteredArray.length < 4)filteredArray.push(0);\n            return filteredArray;\n        };\n        for(let row = 0; row < 4; row++){\n            this.board[row] = shiftAndFilter(this.board[row]);\n            for(let col = 0; col < 3; col++)if (this.board[row][col] === this.board[row][col + 1]) {\n                this.board[row][col] += this.board[row][col + 1];\n                this.board[row][col + 1] = 0;\n                this.score += this.board[row][col];\n                col++;\n            }\n            this.board[row] = shiftAndFilter(this.board[row]);\n        }\n        const newBoard = JSON.stringify(this.board);\n        return oldBoard !== newBoard;\n    }\n    moveRight() {\n        const oldBoard = JSON.stringify(this.board);\n        const shiftAndFilter = (array)=>{\n            const filteredArray = array.filter((cell)=>cell !== 0);\n            while(filteredArray.length < 4)filteredArray.unshift(0);\n            return filteredArray;\n        };\n        for(let row = 0; row < 4; row++){\n            this.board[row] = shiftAndFilter(this.board[row]);\n            for(let col = 0; col < 3; col++)if (this.board[row][col] === this.board[row][col + 1]) {\n                this.board[row][col] += this.board[row][col + 1];\n                this.board[row][col + 1] = 0;\n                this.score += this.board[row][col];\n                col++;\n            }\n            this.board[row] = shiftAndFilter(this.board[row]);\n        }\n        const newBoard = JSON.stringify(this.board);\n        return oldBoard !== newBoard;\n    }\n    moveUp() {\n        const oldBoard = JSON.stringify(this.board);\n        const shiftAndFilter = (array)=>{\n            const filteredArray = array.filter((cell)=>cell !== 0);\n            while(filteredArray.length < 4)filteredArray.push(0);\n            return filteredArray;\n        };\n        for(let col = 0; col < 4; col++){\n            let column = [];\n            for(let row = 0; row < 4; row++)column.push(this.board[row][col]);\n            column = shiftAndFilter(column);\n            for(let r = 0; r < 3; r++)if (column[r] === column[r + 1]) {\n                column[r] += column[r + 1];\n                column[r + 1] = 0;\n                this.score += column[r];\n                r++;\n            }\n            column = shiftAndFilter(column);\n            for(let rowIndex = 0; rowIndex < 4; rowIndex++)this.board[rowIndex][col] = column[rowIndex];\n        }\n        const newBoard = JSON.stringify(this.board);\n        return oldBoard !== newBoard;\n    }\n    moveDown() {\n        const oldBoard = JSON.stringify(this.board);\n        const shiftAndFilter = (array)=>{\n            const filteredArray = array.filter((cell)=>cell !== 0);\n            while(filteredArray.length < 4)filteredArray.push(0);\n            return filteredArray;\n        };\n        for(let col = 0; col < 4; col++){\n            let column = [];\n            for(let row = 0; row < 4; row++)column.push(this.board[row][col]);\n            column.reverse();\n            column = shiftAndFilter(column);\n            for(let r = 0; r < 3; r++)if (column[r] === column[r + 1]) {\n                column[r] += column[r + 1];\n                column[r + 1] = 0;\n                this.score += column[r];\n                r++;\n            }\n            column = shiftAndFilter(column);\n            column.reverse();\n            for(let rowIndex = 0; rowIndex < 4; rowIndex++)this.board[rowIndex][col] = column[rowIndex];\n        }\n        const newBoard = JSON.stringify(this.board);\n        return oldBoard !== newBoard;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.board;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.board[row][col] === 2048) {\n                this.status = 'win';\n                return this.status;\n            }\n        }\n        const hasEmptyTiles = this.board.some((row)=>row.includes(0));\n        if (!hasEmptyTiles) {\n            const canMove = (board)=>{\n                for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n                    if (col < 3 && board[row][col] === board[row][col + 1] || row < 3 && board[row][col] === board[row + 1][col]) return true;\n                }\n                return false;\n            };\n            if (!canMove(this.board)) {\n                this.status = 'lose';\n                return this.status;\n            }\n        }\n        return this.status;\n    }\n    start() {\n        if (this.status === 'idle') {\n            this.board = [\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ]\n            ];\n            this.score = 0;\n        }\n        this.status = 'playing';\n        this.addRandomTiles();\n        this.addRandomTiles();\n    }\n    restart() {\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = 'idle';\n    }\n    addRandomTiles() {\n        const emptyTiles = [];\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.board[row][col] === 0) emptyTiles.push({\n                row: row,\n                col: col\n            });\n        }\n        const randomCell = emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\n        this.board[randomCell.row][randomCell.col] = Math.random() < 0.9 ? 2 : 4;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$mainScore = document.querySelector('.game-score');\nconst $09e991522ca7e64e$var$startButton = document.querySelector('.button.start');\nconst $09e991522ca7e64e$var$messageWin = document.querySelector('.message-win');\nconst $09e991522ca7e64e$var$messageLose = document.querySelector('.message-lose');\nconst $09e991522ca7e64e$var$messageStart = document.querySelector('.message-start');\nfunction $09e991522ca7e64e$var$renderGame() {\n    const boardState = $09e991522ca7e64e$var$game.getState();\n    const cells = document.querySelectorAll('.field-cell');\n    cells.forEach((cell, index)=>{\n        const row = Math.floor(index / 4);\n        const col = index % 4;\n        const value = boardState[row][col];\n        cell.textContent = value === 0 ? '' : value;\n        cell.className = 'field-cell';\n        if (value) {\n            cell.classList.add(`field-cell--${value}`);\n            if (value === 2 || value === 4) cell.classList.add('new');\n        }\n    });\n    $09e991522ca7e64e$var$mainScore.textContent = $09e991522ca7e64e$var$game.getScore();\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    $09e991522ca7e64e$var$messageWin.classList.toggle('hidden', gameStatus !== 'win');\n    $09e991522ca7e64e$var$messageLose.classList.toggle('hidden', gameStatus !== 'lose');\n    $09e991522ca7e64e$var$messageStart.classList.toggle('hidden', gameStatus !== 'idle');\n}\n$09e991522ca7e64e$var$startButton.addEventListener('click', ()=>{\n    if ($09e991522ca7e64e$var$startButton.classList.contains('start')) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$renderGame();\n        $09e991522ca7e64e$var$startButton.classList.remove('start');\n        $09e991522ca7e64e$var$startButton.classList.add('restart');\n        $09e991522ca7e64e$var$startButton.textContent = 'Restart';\n    } else if ($09e991522ca7e64e$var$startButton.classList.contains('restart')) {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$renderGame();\n        $09e991522ca7e64e$var$startButton.classList.remove('restart');\n        $09e991522ca7e64e$var$startButton.classList.add('start');\n        $09e991522ca7e64e$var$startButton.textContent = 'Start';\n    }\n});\ndocument.addEventListener('keydown', (gameEvent)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== 'playing') return;\n    gameEvent.preventDefault();\n    let moved = false;\n    const oldBoardState = JSON.stringify($09e991522ca7e64e$var$game.getState());\n    switch(gameEvent.key){\n        case 'ArrowUp':\n            moved = $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case 'ArrowDown':\n            moved = $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case 'ArrowLeft':\n            moved = $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case 'ArrowRight':\n            moved = $09e991522ca7e64e$var$game.moveRight();\n            break;\n    }\n    const newBoardState = JSON.stringify($09e991522ca7e64e$var$game.getState());\n    if (moved && oldBoardState !== newBoardState) {\n        $09e991522ca7e64e$var$game.addRandomTiles();\n        $09e991522ca7e64e$var$renderGame();\n    }\n});\n$09e991522ca7e64e$var$renderGame();\n\n\n//# sourceMappingURL=2048-game.39281adc.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst mainScore = document.querySelector('.game-score');\nconst startButton = document.querySelector('.button.start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst messageStart = document.querySelector('.message-start');\n\nfunction renderGame() {\n  const boardState = game.getState();\n  const cells = document.querySelectorAll('.field-cell');\n\n  cells.forEach((cell, index) => {\n    const row = Math.floor(index / 4);\n    const col = index % 4;\n    const value = boardState[row][col];\n\n    cell.textContent = value === 0 ? '' : value;\n    cell.className = 'field-cell';\n\n    if (value) {\n      cell.classList.add(`field-cell--${value}`);\n\n      if (value === 2 || value === 4) {\n        cell.classList.add('new');\n      }\n    }\n  });\n\n  mainScore.textContent = game.getScore();\n\n  const gameStatus = game.getStatus();\n\n  messageWin.classList.toggle('hidden', gameStatus !== 'win');\n  messageLose.classList.toggle('hidden', gameStatus !== 'lose');\n  messageStart.classList.toggle('hidden', gameStatus !== 'idle');\n}\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('start')) {\n    game.start();\n    renderGame();\n\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.textContent = 'Restart';\n  } else if (startButton.classList.contains('restart')) {\n    game.restart();\n    renderGame();\n    startButton.classList.remove('restart');\n    startButton.classList.add('start');\n    startButton.textContent = 'Start';\n  }\n});\n\ndocument.addEventListener('keydown', (gameEvent) => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  gameEvent.preventDefault();\n\n  let moved = false;\n\n  const oldBoardState = JSON.stringify(game.getState());\n\n  switch (gameEvent.key) {\n    case 'ArrowUp':\n      moved = game.moveUp();\n      break;\n\n    case 'ArrowDown':\n      moved = game.moveDown();\n      break;\n\n    case 'ArrowLeft':\n      moved = game.moveLeft();\n      break;\n\n    case 'ArrowRight':\n      moved = game.moveRight();\n      break;\n  }\n\n  const newBoardState = JSON.stringify(game.getState());\n\n  if (moved && oldBoardState !== newBoardState) {\n    game.addRandomTiles();\n    renderGame();\n  }\n});\n\nrenderGame();\n","'use strict';\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.board = initialState;\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return false;\n    }\n\n    const oldBoard = JSON.stringify(this.board);\n\n    const shiftAndFilter = (array) => {\n      const filteredArray = array.filter((cell) => cell !== 0);\n\n      while (filteredArray.length < 4) {\n        filteredArray.push(0);\n      }\n\n      return filteredArray;\n    };\n\n    for (let row = 0; row < 4; row++) {\n      this.board[row] = shiftAndFilter(this.board[row]);\n\n      for (let col = 0; col < 3; col++) {\n        if (this.board[row][col] === this.board[row][col + 1]) {\n          this.board[row][col] += this.board[row][col + 1];\n          this.board[row][col + 1] = 0;\n          this.score += this.board[row][col];\n\n          col++;\n        }\n      }\n\n      this.board[row] = shiftAndFilter(this.board[row]);\n    }\n\n    const newBoard = JSON.stringify(this.board);\n\n    return oldBoard !== newBoard;\n  }\n\n  moveRight() {\n    const oldBoard = JSON.stringify(this.board);\n\n    const shiftAndFilter = (array) => {\n      const filteredArray = array.filter((cell) => cell !== 0);\n\n      while (filteredArray.length < 4) {\n        filteredArray.unshift(0);\n      }\n\n      return filteredArray;\n    };\n\n    for (let row = 0; row < 4; row++) {\n      this.board[row] = shiftAndFilter(this.board[row]);\n\n      for (let col = 0; col < 3; col++) {\n        if (this.board[row][col] === this.board[row][col + 1]) {\n          this.board[row][col] += this.board[row][col + 1];\n          this.board[row][col + 1] = 0;\n          this.score += this.board[row][col];\n\n          col++;\n        }\n      }\n\n      this.board[row] = shiftAndFilter(this.board[row]);\n    }\n\n    const newBoard = JSON.stringify(this.board);\n\n    return oldBoard !== newBoard;\n  }\n\n  moveUp() {\n    const oldBoard = JSON.stringify(this.board);\n\n    const shiftAndFilter = (array) => {\n      const filteredArray = array.filter((cell) => cell !== 0);\n\n      while (filteredArray.length < 4) {\n        filteredArray.push(0);\n      }\n\n      return filteredArray;\n    };\n\n    for (let col = 0; col < 4; col++) {\n      let column = [];\n\n      for (let row = 0; row < 4; row++) {\n        column.push(this.board[row][col]);\n      }\n\n      column = shiftAndFilter(column);\n\n      for (let r = 0; r < 3; r++) {\n        if (column[r] === column[r + 1]) {\n          column[r] += column[r + 1];\n          column[r + 1] = 0;\n          this.score += column[r];\n\n          r++;\n        }\n      }\n\n      column = shiftAndFilter(column);\n\n      for (let rowIndex = 0; rowIndex < 4; rowIndex++) {\n        this.board[rowIndex][col] = column[rowIndex];\n      }\n    }\n\n    const newBoard = JSON.stringify(this.board);\n\n    return oldBoard !== newBoard;\n  }\n\n  moveDown() {\n    const oldBoard = JSON.stringify(this.board);\n\n    const shiftAndFilter = (array) => {\n      const filteredArray = array.filter((cell) => cell !== 0);\n\n      while (filteredArray.length < 4) {\n        filteredArray.push(0);\n      }\n\n      return filteredArray;\n    };\n\n    for (let col = 0; col < 4; col++) {\n      let column = [];\n\n      for (let row = 0; row < 4; row++) {\n        column.push(this.board[row][col]);\n      }\n\n      column.reverse();\n      column = shiftAndFilter(column);\n\n      for (let r = 0; r < 3; r++) {\n        if (column[r] === column[r + 1]) {\n          column[r] += column[r + 1];\n          column[r + 1] = 0;\n          this.score += column[r];\n\n          r++;\n        }\n      }\n\n      column = shiftAndFilter(column);\n      column.reverse();\n\n      for (let rowIndex = 0; rowIndex < 4; rowIndex++) {\n        this.board[rowIndex][col] = column[rowIndex];\n      }\n    }\n\n    const newBoard = JSON.stringify(this.board);\n\n    return oldBoard !== newBoard;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 2048) {\n          this.status = 'win';\n\n          return this.status;\n        }\n      }\n    }\n\n    const hasEmptyTiles = this.board.some((row) => row.includes(0));\n\n    if (!hasEmptyTiles) {\n      const canMove = (board) => {\n        for (let row = 0; row < 4; row++) {\n          for (let col = 0; col < 4; col++) {\n            if (\n              (col < 3 && board[row][col] === board[row][col + 1]) ||\n              (row < 3 && board[row][col] === board[row + 1][col])\n            ) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      };\n\n      if (!canMove(this.board)) {\n        this.status = 'lose';\n\n        return this.status;\n      }\n    }\n\n    return this.status;\n  }\n\n  start() {\n    if (this.status === 'idle') {\n      this.board = [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n      ];\n\n      this.score = 0;\n    }\n\n    this.status = 'playing';\n\n    this.addRandomTiles();\n    this.addRandomTiles();\n  }\n\n  restart() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  addRandomTiles() {\n    const emptyTiles = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          emptyTiles.push({ row, col });\n        }\n      }\n    }\n\n    const randomCell =\n      emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\n\n    this.board[randomCell.row][randomCell.col] = Math.random() < 0.9 ? 2 : 4;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","initialState","board","score","status","moveLeft","oldBoard","JSON","stringify","shiftAndFilter","array","filteredArray","filter","cell","length","push","row","col","moveRight","unshift","moveUp","column","r","rowIndex","moveDown","reverse","getScore","getState","getStatus","some","includes","canMove","start","addRandomTiles","restart","emptyTiles","randomCell","Math","floor","random","$09e991522ca7e64e$var$mainScore","document","querySelector","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$renderGame","boardState","cells","querySelectorAll","forEach","index","value","textContent","className","classList","add","gameStatus","toggle","addEventListener","contains","remove","gameEvent","preventDefault","moved","oldBoardState","key","newBoardState"],"version":3,"file":"2048-game.39281adc.js.map"}